%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\jbpenick\Documents\PMASE\Capstone\WikiSQL\data\dev.jsonl
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/06/12 21:03:56

%% Initialize variables.
filename = 'C:\Users\jbpenick\Documents\PMASE\Capstone\WikiSQL\data\dev.jsonl';
delimiter = {': '};

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts text in the input cell array to numbers. Replaced non-numeric
% text with NaN.
rawData = dataArray{7};
for row=1:size(rawData, 1)
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData(row), regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if numbers.contains(',')
            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(numbers, thousandsRegExp, 'once'))
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric text to numbers.
        if ~invalidThousandsSeparator
            numbers = textscan(char(strrep(numbers, ',', '')), '%f');
            numericData(row, 7) = numbers{1};
            raw{row, 7} = numbers{1};
        end
    catch
        raw{row, 7} = rawData{row};
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, 7);
rawStringColumns = string(raw(:, [1,2,3,4,5,6]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [2,4]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
dev = table;
dev.PhaseNumber = rawStringColumns(:, 1);
dev.Table_id = categorical(rawStringColumns(:, 2));
dev.Question = rawStringColumns(:, 3);
dev.sel = categorical(rawStringColumns(:, 4));
dev.Sel_Value = rawStringColumns(:, 5);
dev.Conds = rawStringColumns(:, 6);
dev.Agg = cell2mat(rawNumericColumns(:, 1));

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp rawNumericColumns rawStringColumns R catIdx idx;

%% Clean up mess
for idx=1:height(dev)
tempPhaseNumber(idx,:)=strsplit(dev.PhaseNumber(idx),',');
end
tempPhaseNumber=tempPhaseNumber(:,1);
dev.PhaseNumber=str2double(tempPhaseNumber);
clearvars idx tempPhaseNumber

dev.sel=[];
%dev.Table_id=erase(dev.Table_id,', "question"');
dev.Question=erase(dev.Question,', "sql"');
dev.Sel_Value=erase(dev.Sel_Value,', "conds"');
dev.Sel_Value=str2double(dev.Sel_Value);
dev.Conds=erase(dev.Conds,', "agg"');

a=categories(dev.Table_id)
a=erase(a,', "question"');
dev.Table_id=renamecats(dev.Table_id,a);